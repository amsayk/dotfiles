#!/bin/sh

# Close any open System Preferences panes, to prevent them from overriding
# settings we’re about to change
osascript -e 'tell application "System Preferences" to quit'

set -e

# Disable the sound effects on boot
sudo nvram SystemAudioVolume=" "

# Menu bar: hide the Time Machine, Volume, and User icons
# for domain in ~/Library/Preferences/ByHost/com.apple.systemuiserver.*; do
#   defaults write "${domain}" dontAutoLoad -array \
#     "/System/Library/CoreServices/Menu Extras/TimeMachine.menu" \
#     "/System/Library/CoreServices/Menu Extras/Volume.menu" \
#     "/System/Library/CoreServices/Menu Extras/User.menu" 2> 1
# done
# defaults write com.apple.systemuiserver menuExtras -array \
#   "/System/Library/CoreServices/Menu Extras/Bluetooth.menu" \
#   "/System/Library/CoreServices/Menu Extras/AirPort.menu" \
#   "/System/Library/CoreServices/Menu Extras/Battery.menu" \
#   "/System/Library/CoreServices/Menu Extras/Clock.menu" 2> 1

# Disables "Scroll direction: natural" in favor of old and correct style.
defaults write NSGlobalDomain com.apple.swipescrolldirection -bool false

# Set highlight color to green
defaults write NSGlobalDomain AppleHighlightColor -string "0.764700 0.976500 0.568600"

# Never go into computer sleep mode
sudo systemsetup -setcomputersleep Off > /dev/null

# Disable Notification Center and remove the menu bar icon
launchctl unload -w /System/Library/LaunchAgents/com.apple.notificationcenterui.plist 2> /dev/null

# Save screenshots to the desktop
defaults write com.apple.screencapture location -string "${HOME}/Desktop"

# Save screenshots in PNG format (other options: BMP, GIF, JPG, PDF, TIFF)
defaults write com.apple.screencapture type -string "png"

# Set language and text formats
# Note: if you’re in the US, replace `EUR` with `USD`, `Centimeters` with
# `Inches`, `en_GB` with `en_US`, and `true` with `false`.
defaults write NSGlobalDomain AppleLanguages -array "en"
defaults write NSGlobalDomain AppleLocale -string "en_US@currency=USD"
defaults write NSGlobalDomain AppleMeasurementUnits -string "Inches"
defaults write NSGlobalDomain AppleMetricUnits -bool true

# Set Desktop as the default location for new Finder windows
# For other paths, use `PfLo` and `file:///full/path/here/`
defaults write com.apple.finder NewWindowTarget -string "PfDe"
defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}/Desktop/"

# Use list view in all Finder windows by default
# Four-letter codes for the other view modes: `icnv`, `clmv`, `Flwv`
defaults write com.apple.finder FXPreferredViewStyle -string "Nlsv"

# Disable the warning before emptying the Trash
defaults write com.apple.finder WarnOnEmptyTrash -bool false

# Enable highlight hover effect for the grid view of a stack (Dock)
defaults write com.apple.dock mouse-over-hilite-stack -bool true

# Set the icon size of Dock items to 36 pixels
defaults write com.apple.dock tilesize -int 36

# Change minimize/maximize window effect
defaults write com.apple.dock mineffect -string "scale"

# Minimize windows into their application’s icon
defaults write com.apple.dock minimize-to-application -bool true

# Enable spring loading for all Dock items
defaults write com.apple.dock enable-spring-load-actions-on-all-items -bool true

# Show indicator lights for open applications in the Dock
defaults write com.apple.dock show-process-indicators -bool true

# Wipe all (default) app icons from the Dock
# This is only really useful when setting up a new Mac, or if you don’t use
# the Dock to launch apps.
#defaults write com.apple.dock persistent-apps -array

# Show only open applications in the Dock
#defaults write com.apple.dock static-only -bool true

# Don’t animate opening applications from the Dock
defaults write com.apple.dock launchanim -bool false

# Speed up Mission Control animations
defaults write com.apple.dock expose-animation-duration -float 0.1

# Remove the auto-hiding Dock delay
defaults write com.apple.dock autohide-delay -float 0
# Remove the animation when hiding/showing the Dock
defaults write com.apple.dock autohide-time-modifier -float 0

# Automatically hide and show the Dock
defaults write com.apple.dock autohide -bool true

# Make Dock icons of hidden applications translucent
defaults write com.apple.dock showhidden -bool true

# Only use UTF-8 in Terminal.app
defaults write com.apple.terminal StringEncodings -array 4

# Add iOS & Watch Simulator to Launchpad
sudo ln -sf "/Applications/Xcode.app/Contents/Developer/Applications/Simulator.app" "/Applications/Simulator.app" 2> /dev/null
sudo ln -sf "/Applications/Xcode.app/Contents/Developer/Applications/Simulator (Watch).app" "/Applications/Simulator (Watch).app" 2> /dev/null

# Privacy: don’t send search queries to Apple
defaults write com.apple.Safari UniversalSearchEnabled -bool false
defaults write com.apple.Safari SuppressSearchSuggestions -bool true

###############################################################################
# Activity Monitor                                                            #
###############################################################################

# Show the main window when launching Activity Monitor
defaults write com.apple.ActivityMonitor OpenMainWindow -bool true

# Visualize CPU usage in the Activity Monitor Dock icon
defaults write com.apple.ActivityMonitor IconType -int 5

# Show all processes in Activity Monitor
defaults write com.apple.ActivityMonitor ShowCategory -int 0

# Sort Activity Monitor results by CPU usage
defaults write com.apple.ActivityMonitor SortColumn -string "CPUUsage"
defaults write com.apple.ActivityMonitor SortDirection -int 0

###############################################################################
# Mac App Store                                                               #
###############################################################################

# Enable the WebKit Developer Tools in the Mac App Store
defaults write com.apple.appstore WebKitDeveloperExtras -bool true

# Enable Debug Menu in the Mac App Store
defaults write com.apple.appstore ShowDebugMenu -bool true

# Enable the automatic update check
defaults write com.apple.SoftwareUpdate AutomaticCheckEnabled -bool true

# Check for software updates daily, not just once per week
defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1

# Download newly available updates in background
defaults write com.apple.SoftwareUpdate AutomaticDownload -int 1

# Install System data files & security updates
defaults write com.apple.SoftwareUpdate CriticalUpdateInstall -int 1

# Automatically download apps purchased on other Macs
defaults write com.apple.SoftwareUpdate ConfigDataInstall -int 1

# Turn off app auto-update
defaults write com.apple.commerce AutoUpdate -bool false

# Allow the App Store to reboot machine on macOS updates
defaults write com.apple.commerce AutoUpdateRestartRequired -bool true

###############################################################################
# Google Chrome & Google Chrome Canary                                        #
###############################################################################

# Allow installing user scripts via GitHub Gist or Userscripts.org
defaults write com.google.Chrome ExtensionInstallSources -array "https://gist.githubusercontent.com/" "http://userscripts.org/*"
defaults write com.google.Chrome.canary ExtensionInstallSources -array "https://gist.githubusercontent.com/" "http://userscripts.org/*"

# Disable the all too sensitive backswipe on trackpads
defaults write com.google.Chrome AppleEnableSwipeNavigateWithScrolls -bool false
defaults write com.google.Chrome.canary AppleEnableSwipeNavigateWithScrolls -bool false

# Disable the all too sensitive backswipe on Magic Mouse
defaults write com.google.Chrome AppleEnableMouseSwipeNavigateWithScrolls -bool false
defaults write com.google.Chrome.canary AppleEnableMouseSwipeNavigateWithScrolls -bool false

# Use the system-native print preview dialog
defaults write com.google.Chrome DisablePrintPreview -bool true
defaults write com.google.Chrome.canary DisablePrintPreview -bool true

# Expand the print dialog by default
defaults write com.google.Chrome PMPrintingExpandedStateForPrint2 -bool true
defaults write com.google.Chrome.canary PMPrintingExpandedStateForPrint2 -bool true

###############################################################################
# SizeUp.app                                                                  #
###############################################################################

# Start SizeUp at login
defaults write com.irradiatedsoftware.SizeUp StartAtLogin -bool true

# Don’t show the preferences window on next start
defaults write com.irradiatedsoftware.SizeUp ShowPrefsOnNextStart -bool false

###############################################################################
# Transmission.app                                                            #
###############################################################################

# Use `~/Documents/Torrents` to store incomplete downloads
defaults write org.m0k.transmission UseIncompleteDownloadFolder -bool true
defaults write org.m0k.transmission IncompleteDownloadFolder -string "${HOME}/Documents/Torrents"

# Don’t prompt for confirmation before downloading
defaults write org.m0k.transmission DownloadAsk -bool false
defaults write org.m0k.transmission MagnetOpenAsk -bool false

# Trash original torrent files
defaults write org.m0k.transmission DeleteOriginalTorrent -bool true

# Hide the donate message
defaults write org.m0k.transmission WarningDonate -bool false
# Hide the legal disclaimer
defaults write org.m0k.transmission WarningLegal -bool false

# IP block list.
# Source: https://giuliomac.wordpress.com/2014/02/19/best-blocklist-for-transmission/
defaults write org.m0k.transmission BlocklistNew -bool true
defaults write org.m0k.transmission BlocklistURL -string "http://john.bitsurge.net/public/biglist.p2p.gz"
defaults write org.m0k.transmission BlocklistAutoUpdate -bool true

# Tweak subpixel font rendering (https://wincent.com/wiki/AppleFontSmoothing)
if [ -z `defaults -currentHost read NSGlobalDomain AppleFontSmoothing 2> /dev/null` ]; then
  defaults -currentHost write NSGlobalDomain AppleFontSmoothing -int 1
elif [ `defaults -currentHost read NSGlobalDomain AppleFontSmoothing` -ne 1 ]; then
  defaults -currentHost write NSGlobalDomain AppleFontSmoothing -int 1
fi

# System Preferences -> Desktop & Screen Saver -> Screen Saver -> Show with clock
if [ -z `defaults -currentHost read com.apple.screensaver showClock 2> /dev/null` ]; then
  defaults -currentHost write com.apple.screensaver showClock -int 1
elif [ `defaults -currentHost read com.apple.screensaver showClock` -ne 1 ]; then
  defaults -currentHost write com.apple.screensaver showClock -int 1
fi

# System Preferences -> Desktop & Screen Saver -> Screen Saver -> Start after -> 5 Minutes
if [ -z `defaults -currentHost read com.apple.screensaver idleTime 2> /dev/null` ]; then
  defaults -currentHost write com.apple.screensaver idleTime -int 300
elif [ `defaults -currentHost read com.apple.screensaver idleTime` -ne 300 ]; then
  defaults -currentHost write com.apple.screensaver idleTime -int 300
fi

# System Preferences -> General -> Appearance -> Automatically hide and show the menu bar
if [ -z `defaults read NSGlobalDomain _HIHideMenuBar 2> /dev/null` ]; then
  defaults write NSGlobalDomain _HIHideMenuBar -int 0
elif [ `defaults read NSGlobalDomain _HIHideMenuBar` -ne 1 ]; then
  defaults write NSGlobalDomain _HIHideMenuBar -int 1
fi

# System Preferences -> General -> Appearance -> Graphite
if [ -z `defaults read NSGlobalDomain AppleAquaColorVariant 2> /dev/null` ]; then
  defaults write NSGlobalDomain AppleAquaColorVariant -int 6
elif [ `defaults read NSGlobalDomain AppleAquaColorVariant` -ne 6 ]; then
  defaults write NSGlobalDomain AppleAquaColorVariant -int 6
fi

# Disable press-and-hold for keys in favor of key repeat Requires logout.
if [ -z `defaults read NSGlobalDomain ApplePressAndHoldEnabled 2> /dev/null` ]; then
  defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false
elif [ `defaults read NSGlobalDomain ApplePressAndHoldEnabled` -ne 0 ]; then
  defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false
fi

# System Preferences -> General -> Click in scroll bar to -> Jump to the next page
if [ -z `defaults read NSGlobalDomain AppleScrollerPagingBehavior 2> /dev/null` ]; then
  defaults write NSGlobalDomain AppleScrollerPagingBehavior -int 0
elif [ `defaults read NSGlobalDomain AppleScrollerPagingBehavior` -ne 0 ]; then
  defaults write NSGlobalDomain AppleScrollerPagingBehavior -int 0
fi

# Finder -> show all filename extensions
if [ -z `defaults read NSGlobalDomain AppleShowAllExtensions 2> /dev/null` ]; then
  defaults write NSGlobalDomain AppleShowAllExtensions -bool true
elif [ `defaults read NSGlobalDomain AppleShowAllExtensions` -ne 1 ]; then
  defaults write NSGlobalDomain AppleShowAllExtensions -bool true
fi

# System Preferences -> General -> Show scroll bars -> Automatically based on mouse or trackpad
# if [ -z `defaults read NSGlobalDomain AppleShowScrollBars 2> /dev/null` ]; then
#   defaults write NSGlobalDomain AppleShowScrollBars -string "Automatic"
# elif [ `defaults read NSGlobalDomain AppleShowScrollBars` -ne "Automatic" ]; then
  defaults write NSGlobalDomain AppleShowScrollBars -string "Automatic"
# fi

# Expand print panel by default
if [ -z `defaults read NSGlobalDomain PMPrintingExpandedStateForPrint 2> /dev/null` ]; then
  defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
elif [ `defaults read NSGlobalDomain PMPrintingExpandedStateForPrint` -ne 1 ]; then
  defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
fi

# Expand print panel by default
if [ -z `defaults read NSGlobalDomain PMPrintingExpandedStateForPrint2 2> /dev/null` ]; then
  defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true
elif [ `defaults read NSGlobalDomain PMPrintingExpandedStateForPrint2` -ne 1 ]; then
  defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true
fi

# Disable smart quotes, dashes, ellipses
if [ -z `defaults read NSGlobalDomain NSAutomaticDashSubstitutionEnabled 2> /dev/null` ]; then
  defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false
elif [ `defaults read NSGlobalDomain NSAutomaticDashSubstitutionEnabled` -ne 0 ]; then
  defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false
fi

# Disable smart quotes, dashes, ellipses
if [ -z `defaults read NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled 2> /dev/null` ]; then
  defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false
elif [ `defaults read NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled` -ne 0 ]; then
  defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false
fi

# Disable auto-correct
if [ -z `defaults read NSGlobalDomain NSAutomaticSpellingCorrectionEnabled 2> /dev/null` ]; then
  defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false
elif [ `defaults read NSGlobalDomain NSAutomaticSpellingCorrectionEnabled` -ne 0 ]; then
  defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false
fi

# System Preferences -> General -> [Don't] Ask to keep changes when closing documents
if [ -z `defaults read NSGlobalDomain NSCloseAlwaysConfirmsChanges 2> /dev/null` ]; then
  defaults write NSGlobalDomain NSCloseAlwaysConfirmsChanges -int 0
elif [ `defaults read NSGlobalDomain NSCloseAlwaysConfirmsChanges` -ne 0 ]; then
  defaults write NSGlobalDomain NSCloseAlwaysConfirmsChanges -int 0
fi

# Expand save panel by default
if [ -z `defaults read NSGlobalDomain NSNavPanelExpandedStateForSaveMode 2> /dev/null` ]; then
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
elif [ `defaults read NSGlobalDomain NSNavPanelExpandedStateForSaveMode` -ne 1 ]; then
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
fi

# Expand save panel by default
if [ -z `defaults read NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 2> /dev/null` ]; then
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true
elif [ `defaults read NSGlobalDomain NSNavPanelExpandedStateForSaveMode2` -ne 1 ]; then
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true
fi

# System Preferences -> General -> [Don't] Close windows when quitting an app
if [ -z `defaults read NSGlobalDomain NSQuitAlwaysKeepsWindows 2> /dev/null` ]; then
  defaults write NSGlobalDomain NSQuitAlwaysKeepsWindows -int 0
elif [ `defaults read NSGlobalDomain NSQuitAlwaysKeepsWindows` -ne 0 ]; then
  defaults write NSGlobalDomain NSQuitAlwaysKeepsWindows -int 0
fi

# System Preferences -> General -> Sidebar icon size -> Small
if [ -z `defaults read NSGlobalDomain NSTableViewDefaultSizeMode 2> /dev/null` ]; then
  defaults write NSGlobalDomain NSTableViewDefaultSizeMode -int 1
elif [ `defaults read NSGlobalDomain NSTableViewDefaultSizeMode` -ne 1 ]; then
  defaults write NSGlobalDomain NSTableViewDefaultSizeMode -int 1
fi

# Make sheets drop down (almost) instantly
# if [ -z `defaults read NSGlobalDomain NSWindowResizeTime 2> /dev/null` ]; then
#   defaults write NSGlobalDomain NSWindowResizeTime -float 0.001
# elif [ `defaults read NSGlobalDomain NSWindowResizeTime` -ne 0.001 ]; then
  defaults write NSGlobalDomain NSWindowResizeTime -float 0.001
# fi

# System Preferences -> Sound -> Sound Effects -> Play feedback when volume is changed
if [ -z `defaults read NSGlobalDomain com.apple.sound.beep.feedback 2> /dev/null` ]; then
  defaults write NSGlobalDomain com.apple.sound.beep.feedback -bool false
elif [ `defaults read NSGlobalDomain com.apple.sound.beep.feedback` -ne 0 ]; then
  defaults write NSGlobalDomain com.apple.sound.beep.feedback -bool false
fi

# Finder -> Preferences -> General -> Spring-loaded folders and windows -> Delay (short)
# if [ -z `defaults read NSGlobalDomain com.apple.springing.delay 2> /dev/null` ]; then
#   defaults write NSGlobalDomain com.apple.springing.delay -float 0
# elif [ `defaults read NSGlobalDomain com.apple.springing.delay` -ne 0.0 ]; then
  defaults write NSGlobalDomain com.apple.springing.delay -float 0
# fi

# Finder -> Preferences -> General -> Spring-loaded folders and windows
if [ -z `defaults read NSGlobalDomain com.apple.springing.enabled 2> /dev/null` ]; then
  defaults write NSGlobalDomain com.apple.springing.enabled -bool true
elif [ `defaults read NSGlobalDomain com.apple.springing.enabled` -ne 1 ]; then
  defaults write NSGlobalDomain com.apple.springing.enabled -bool true
fi

# System Preferences -> Desktop & Screen Saver -> Screen Saver -> Hot Corners -> [Bottom Left] Start Screen Saver
if [ -z `defaults read com.apple.dock wvous-bl-corner 2> /dev/null` ]; then
  defaults write com.apple.dock wvous-bl-corner -int 5
elif [ `defaults read com.apple.dock wvous-bl-corner` -ne 5 ]; then
  defaults write com.apple.dock wvous-bl-corner -int 5
fi

# System Preferences -> Desktop & Screen Saver -> Screen Saver -> Hot Corners -> [Top Right] Disable Screen Saver
if [ -z `defaults read com.apple.dock wvous-tr-corner 2> /dev/null` ]; then
  defaults write com.apple.dock wvous-tr-corner -int 6
elif [ `defaults read com.apple.dock wvous-tr-corner` -ne 6 ]; then
  defaults write com.apple.dock wvous-tr-corner -int 6
fi

# Don't display full POSIX path as Finder window title
if [ -z `defaults read com.apple.finder _FXShowPosixPathInTitle 2> /dev/null` ]; then
  defaults write com.apple.finder _FXShowPosixPathInTitle -bool false
elif [ `defaults read com.apple.finder _FXShowPosixPathInTitle` -ne 0 ]; then
  defaults write com.apple.finder _FXShowPosixPathInTitle -bool false
fi

# Finder -> disable window animations and Get Info animations
if [ -z `defaults read com.apple.finder DisableAllAnimations 2> /dev/null` ]; then
  defaults write com.apple.finder DisableAllAnimations -bool true
elif [ `defaults read com.apple.finder DisableAllAnimations` -ne 1 ]; then
  defaults write com.apple.finder DisableAllAnimations -bool true
fi

# Disable the warning when changing a file extension
if [ -z `defaults read com.apple.finder FXEnableExtensionChangeWarning 2> /dev/null` ]; then
  defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false
elif [ `defaults read com.apple.finder FXEnableExtensionChangeWarning` -ne 0 ]; then
  defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false
fi

# Finder -> allow text selection in Quick Look
if [ -z `defaults read com.apple.finder QLEnableTextSelection 2> /dev/null` ]; then
  defaults write com.apple.finder QLEnableTextSelection -bool true
elif [ `defaults read com.apple.finder QLEnableTextSelection` -ne 1 ]; then
  defaults write com.apple.finder QLEnableTextSelection -bool true
fi

# Finder -> allow quitting via Command-Q; doing so will also hide desktop icons
if [ -z `defaults read com.apple.finder QuitMenuItem 2> /dev/null` ]; then
  defaults write com.apple.finder QuitMenuItem -bool true
elif [ `defaults read com.apple.finder QuitMenuItem` -ne 1 ]; then
  defaults write com.apple.finder QuitMenuItem -bool true
fi

# Finder -> show path bar
if [ -z `defaults read com.apple.finder ShowPathbar 2> /dev/null` ]; then
  defaults write com.apple.finder ShowPathbar -bool true
elif [ `defaults read com.apple.finder ShowPathbar` -ne 1 ]; then
  defaults write com.apple.finder ShowPathbar -bool true
fi

# Finder -> show status bar
if [ -z `defaults read com.apple.finder ShowStatusBar 2> /dev/null` ]; then
  defaults write com.apple.finder ShowStatusBar -bool true
elif [ `defaults read com.apple.finder ShowStatusBar` -ne 1 ]; then
  defaults write com.apple.finder ShowStatusBar -bool true
fi

# Automatically quit printer app once the print jobs complete
if [ -z `defaults read com.apple.print.PrintingPrefs "Quit When Finished" 2> /dev/null` ]; then
  defaults write com.apple.print.PrintingPrefs "Quit When Finished" -bool true
elif [ `defaults read com.apple.print.PrintingPrefs "Quit When Finished"` -ne 1 ]; then
  defaults write com.apple.print.PrintingPrefs "Quit When Finished" -bool true
fi

# System Preferences -> General -> Recent items
# if [ -z `defaults read com.apple.recentitems RecentApplications 2> /dev/null` ]; then
#   defaults write com.apple.recentitems RecentApplications -dict-add MaxAmount 50
# elif [ `defaults read com.apple.recentitems RecentApplications` -ne 50 ]; then
  defaults write com.apple.recentitems RecentApplications -dict-add MaxAmount 50
# fi

# System Preferences -> General -> Recent items
# if [ -z `defaults read com.apple.recentitems RecentDocuments 2> /dev/null` ]; then
#   defaults write com.apple.recentitems RecentDocuments -dict-add MaxAmount 50
# elif [ `defaults read com.apple.recentitems RecentDocuments` -ne 50 ]; then
  defaults write com.apple.recentitems RecentDocuments -dict-add MaxAmount 50
# fi

# System Preferences -> General -> Recent items
# if [ -z `defaults read com.apple.recentitems RecentServers 2> /dev/null` ]; then
#   defaults write com.apple.recentitems RecentServers -dict-add MaxAmount 50
# elif [ `defaults read com.apple.recentitems RecentServers` -ne 50 ]; then
  defaults write com.apple.recentitems RecentServers -dict-add MaxAmount 50
# fi

# Require password immediately after sleep or screen saver begins
if [ -z `defaults read com.apple.screensaver askForPassword 2> /dev/null` ]; then
  defaults write com.apple.screensaver askForPassword -int 1
elif [ `defaults read com.apple.screensaver askForPassword` -ne 1 ]; then
  defaults write com.apple.screensaver askForPassword -int 1
fi

# Require password immediately after sleep or screen saver begins
if [ -z `defaults read com.apple.screensaver askForPasswordDelay 2> /dev/null` ]; then
  defaults write com.apple.screensaver askForPasswordDelay -int 0
elif [ `defaults read com.apple.screensaver askForPasswordDelay` -ne 0 ]; then
  defaults write com.apple.screensaver askForPasswordDelay -int 0
fi

# Use plain text mode for new TextEdit documents
if [ -z `defaults read com.apple.TextEdit RichText 2> /dev/null` ]; then
  defaults write com.apple.TextEdit RichText -int 0
elif [ `defaults read com.apple.TextEdit RichText` -ne 0 ]; then
  defaults write com.apple.TextEdit RichText -int 0
fi

# System Preferences -> Accessibility -> Display -> Reduce Transparency
if [ -z `defaults read com.apple.universalaccess reduceTransparency 2> /dev/null` ]; then
  defaults write com.apple.universalaccess reduceTransparency -bool true
elif [ `defaults read com.apple.universalaccess reduceTransparency` -ne 1 ]; then
  defaults write com.apple.universalaccess reduceTransparency -bool true
fi

defaults write com.googlecode.iterm2 LoadPrefsFromCustomFolder -int 1
defaults write com.googlecode.iterm2 PrefsCustomFolder -string "${HOME}/dotfiles/iTerm2/"

defaults write com.apple.BluetoothAudioAgent "Apple Bitpool Max (editable)" 80
defaults write com.apple.BluetoothAudioAgent "Apple Bitpool Min (editable)" 80
defaults write com.apple.BluetoothAudioAgent "Apple Initial Bitpool (editable)" 80
defaults write com.apple.BluetoothAudioAgent "Apple Initial Bitpool Min (editable)" 80
defaults write com.apple.BluetoothAudioAgent "Negotiated Bitpool" 80
defaults write com.apple.BluetoothAudioAgent "Negotiated Bitpool Max" 80
defaults write com.apple.BluetoothAudioAgent "Negotiated Bitpool Min" 80

# [10.9] Disable local Time Machine snapshots
sudo tmutil disable
sudo tmutil disablelocal

# [10.11.1] Show the ~/Library folder
chflags nohidden ~/Library

# [10.9] Misc `systemsetup` settings: see `man systemsetup`
sudo systemsetup -settimezone Africa/Casablanca
sudo systemsetup -setusingnetworktime on
sudo systemsetup -setcomputersleep Never
sudo systemsetup -setdisplaysleep 15
sudo systemsetup -setharddisksleep Never
sudo systemsetup -setrestartfreeze on
sudo systemsetup -setremoteappleevents off

###############################################################################
# Kill affected applications                                                  #
###############################################################################

for app in "Activity Monitor" "Address Book" "Calendar" "Contacts" "cfprefsd" \
  "Dock" "Finder" "Google Chrome" "Google Chrome Canary" "Mail" "Messages" \
  "Opera" "Photos" "Safari" "SizeUp" "Spectacle" "SystemUIServer" "Terminal" \
  "Transmission" "Tweetbot" "Twitter" "iCal"; do
  killall "${app}" &> /dev/null
done
echo "Done. Note that some of these changes require a logout/restart to take effect."

